#![allow(rust_2018_idioms)]
#![cfg_attr(feature = "cargo-clippy", allow(clippy))]

use crate::ast;
use crate::ast::*;
use crate::ir::*;
use crate::MathOperator;
use crate::lexer::Tok;
use nan_preserving_float::F64;

grammar<'input>;

Spanned<Rule>: Spanned<Rule> =
    <l:@L> <rule:Rule> <r:@R> => rule.spanned(l, r);

pub Module: Module<'input> = {
    (<ModifiedFunction*>) => Module::new(<>)
}

ModifiedFunction: Function<'input> = {
    "export" <Function> => <>.exported(),
    <Function>
}

Function: Function<'input> = {
    "def" <name:Identifier> <args:Parameters> "->" <ty:Type> <body:Block> => Function::new(name, args, ty, body),
    "def" <name:Identifier> <args:Parameters> <body:Block> => Function::new(name, args, Type::Void, body)
}

Parameters: Parameters<'input> = {
    "(" <Parameter> <("," <Parameter>)*> ")" => Parameters::from_parser(<>),
    "(" ")" => Parameters::empty()
}

Parameter: Parameter<'input> = {
    <Identifier> ":" <Type> => Parameter::new(<>)
}

Type: Type = {
    "i32" => Type::i32(),
    "i64" => Type::i64(),
    "u32" => Type::u32(),
    "u64" => Type::u64(),
    "f32" => Type::f32(),
    "f64" => Type::f64(),
}

Block: Block<'input> = {
    "{" <(<Expression>)*> "}" => Block::new(<>)
}

Expression: Expression<'input> = {
    <Expression3>
}

Expression1: Expression<'input> = {
    <Identifier> => Expression::VariableAccess(<>),
    <I32>,
    <F64>
}

Expression2: Expression<'input> = {
    <Expression1>,
    <lhs:Expression2> "*" <rhs:Expression1> => Expression::Binary(MathOperator::Mul, Box::new(BinaryExpression::new(lhs, rhs))),
    <lhs:Expression2> "/" <rhs:Expression1> => Expression::Binary(MathOperator::Div, Box::new(BinaryExpression::new(lhs, rhs)))
}

Expression3: Expression<'input> = {
    <Expression2>,
    <lhs:Expression3> "+" <rhs:Expression2> => Expression::Binary(MathOperator::Add, Box::new(BinaryExpression::new(lhs, rhs))),
    <lhs:Expression3> "-" <rhs:Expression2> => Expression::Binary(MathOperator::Sub, Box::new(BinaryExpression::new(lhs, rhs)))
}

Identifier: Identifier<'input> = <id: Spanned<RawIdentifier>> => id;
RawIdentifier: RawIdentifier<'input> = <id: "Id"> => ident(id);

I32: Expression<'input> = <"Int"> => Expression::Const(ast::ConstExpression::Integer(<>));
F64: Expression<'input> = <"Float"> => Expression::Const(ast::ConstExpression::Float(<>));

extern {
    type Location = usize;
    type Error = crate::CompileError;

    enum Tok<'input> {
        "export" => Tok::Export,
        "def" => Tok::Def,

        "->" => Tok::Arrow,
        "(" => Tok::OpenParen,
        ")" => Tok::CloseParen,
        "{" => Tok::OpenBrace,
        "}" => Tok::CloseBrace,
        ":" => Tok::Colon,
        "," => Tok::Comma,

        "i32" => Tok::I32,
        "i64" => Tok::I64,
        "u32" => Tok::U32,
        "u64" => Tok::U64,
        "f32" => Tok::F32,
        "f64" => Tok::F64,

        "*" => Tok::Mul,
        "/" => Tok::Div,
        "+" => Tok::Add,
        "-" => Tok::Sub,

        "Id" => Tok::Id(<&'input str>),
        "Int" => Tok::Int(<i32>),
        "Float" => Tok::Float(<F64>),

        "WS" => Tok::WS(<&'input str>),
    }
}